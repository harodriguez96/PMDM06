{"version":3,"file":"node_modules_capacitor_filesystem_dist_esm_web_js.js","mappings":"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","sources":["./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            var _a, _b;\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!options.progress)\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const result = await this.writeFile({\n                path: options.path,\n                directory: (_a = options.directory) !== null && _a !== void 0 ? _a : undefined,\n                recursive: (_b = options.recursive) !== null && _b !== void 0 ? _b : false,\n                data: blob,\n            });\n            return { path: result.uri, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding && !(data instanceof Blob)) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data instanceof Blob ? data.size : data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content instanceof Blob) {\n                throw Error('The occupied entry contains a Blob object which cannot be appended to.');\n            }\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"],"names":["WebPlugin","buildRequestInit","Encoding","resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","arguments","DB_VERSION","DB_NAME","_writeCmds","downloadFile","options","_a","_b","requestInit","webFetchExtra","response","fetch","url","blob","progress","body","Blob","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","read","status","notifyListeners","allChunks","Uint8Array","position","chunk","set","buffer","type","undefined","result","writeFile","directory","recursive","data","uri","initDb","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","getPath","uriPath","cleanedUriPath","replace","fsPath","clear","readFile","entry","Error","content","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","appendFile","btoa","atob","deleteFile","entries","IDBKeyRange","only","depth","match","rmdir","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","all","map","e","subEntry","substring","getUri","rename","_copy","copy","requestPermissions","publicStorage","checkPermissions","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","UTF8","writeResult","contents","filename","str","err","_debug"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}